STANDARD DATA DICTIONARY #3.4 -- COMMUNICATIONS PROTOCOL FILE                                                                                                                                                                     MAY 20,2014@15:36:28  PAGE 1
STORED IN ^DIC(3.4,  (27 ENTRIES)   SITE: PLA.ISC-WASH.MED.VA.GOV   UCI: VISTA,PLA                                                                                                                                                            (VERSION 8.0)   

DATA          NAME                  GLOBAL        DATA
ELEMENT       TITLE                 LOCATION      TYPE
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
This file holds the definitions of all the communications protocols known to the kernel.  A protocol has executable MUMPS code for sending, receiving, opening, and closing a link.  This file is not to be touched by anyone not intimately knowledgeable
with the workings of the networked MailMan.  



POINTED TO BY: TCP/IP COMMUNICATIONS PROTOCOL field (#8.23) of the MAILMAN SITE PARAMETERS File (#4.3) 
               

CROSS
REFERENCED BY: NAME(B)

3.4,.01       NAME                   0;1 FREE TEXT (Required)

              Name of the channel                                                                                              
              INPUT TRANSFORM:  K:$L(X)>30!($L(X)<3)!'(X'?1P.E)!(X'?.ANP) X
              LAST EDITED:      OCT 09, 1985 
              HELP-PROMPT:      ANSWER MUST BE 3-30 CHARACTERS IN LENGTH 
              DESCRIPTION:
                                The name assigned to this particular communications protocol.  

              CROSS-REFERENCE:  3.4^B 
                                1)= S ^DIC(3.4,"B",$E(X,1,30),DA)=""
                                2)= K ^DIC(3.4,"B",$E(X,1,30),DA)


3.4,1         SEND                   1;E1,200 MUMPS

              The executable code to send a line of data in <XMSG>                                                             
              INPUT TRANSFORM:  K:$L(X)>200!($L(X)<1) X
              HELP-PROMPT:      ANSWER MUST BE 1-200 CHARACTERS IN LENGTH 
              DESCRIPTION:
                                The executable MUMPS code that will send the data in the variable XMSG.  

              WRITE AUTHORITY:  @

3.4,2         RECEIVE                2;E1,200 MUMPS

              The executable code to receive a line of data in <XMRG>                                                          
              INPUT TRANSFORM:  K:$L(X)>200!($L(X)<1) X
              HELP-PROMPT:      ANSWER MUST BE 1-200 CHARACTERS IN LENGTH 
              DESCRIPTION:
                                The executable MUMPS code which will receive data and store it in the variable XMRG.  

              WRITE AUTHORITY:  @

3.4,3         OPEN                   3;E1,200 MUMPS

              The executable code to open the channel, setting <IO> to proper values                                           
              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      APR 24, 2002 
              HELP-PROMPT:      ANSWER MUST BE 1-200 CHARACTERS IN LENGTH 
              DESCRIPTION:      The executable MUMPS code which will open the communication channel, setting the variable IO to the proper value.  
                                 
                                There are a couple of variables that can be set in this area to control the connection: 
                                 
                                XMNO220=1 will stop MailMan from issuing its second (and mandatory when talking to another MailMan system, but fatal when talking to non-MailMan SMTP messaging systems) 220 'ready' when the receiver is indicating it is on
                                the line and ready to receive.  
                                 
                                XMD="D" causes MailMan to echo on the principle device the entire transmission script.  

              WRITE AUTHORITY:  @

3.4,4         CLOSE                  4;E1,200 MUMPS

              The executable code to close the channel                                                                         
              INPUT TRANSFORM:  K:$L(X)>200!($L(X)<1) X
              HELP-PROMPT:      ANSWER MUST BE 1-200 CHARACTERS IN LENGTH 
              DESCRIPTION:
                                The executable MUMPS code which will close the communication channel.  

              WRITE AUTHORITY:  @

3.4,5         DESCRIPTION            5;0   WORD-PROCESSING #3.41



INPUT TEMPLATE(S):

PRINT TEMPLATE(S):

SORT TEMPLATE(S):

FORM(S)/BLOCK(S):