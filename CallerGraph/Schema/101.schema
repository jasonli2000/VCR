STANDARD DATA DICTIONARY #101 -- PROTOCOL FILE                                                                                                                                                                                    MAY 20,2014@15:36:19  PAGE 1
STORED IN ^ORD(101,  (4056 ENTRIES)   SITE: PLA.ISC-WASH.MED.VA.GOV   UCI: VISTA,PLA                                                                                                                                                          (VERSION 1.6)   

DATA          NAME                  GLOBAL        DATA
ELEMENT       TITLE                 LOCATION      TYPE
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
This file contains the orderables and methods for accomplishing orders (protocols) within OE/RR.  


COMPILED CROSS-REFERENCE ROUTINE: XQORC
IDENTIFIED BY: ITEM TEXT (#1), IDENTIFIER (#44)

POINTED TO BY: PROTOCOL or OPTION USED field (#4.2) of the AUDIT File (#1.1) 
               PROTOCOL field (#1) of the PHARMACY QUICK ORDER File (#57.1) 
               PROTOCOL field (#.01) of the LAB SEARCH/EXTRACT PROTOCOL File (#69.4) 
               DIALOG field (#2) of the ORDER File (#100) 
               NAME field (#.01) of the ORDER STATISTICS File (#100.1) 
               ADD MENU DEFAULT field (#4) of the ORDER PARAMETERS File (#100.99) 
               PROTOCOL field (#.01) of the CONVERTED PROTOCOLS sub-field (#100.99101) of the ORDER PARAMETERS File (#100.99) 
               PROTOCOL field (#.01) of the UNSUCCESSFUL DIALOGS sub-field (#100.99141) of the ORDER PARAMETERS File (#100.99) 
               PROTOCOL TO EXPORT field (#.01) of the PROTOCOL TO EXPORT sub-field (#100.9951) of the PACKAGE PARAMETERS sub-field (#100.995) of the ORDER PARAMETERS File (#100.99) 
               MENU field (#.01) of the MENU sub-field (#100.99511) of the PROTOCOL TO EXPORT sub-field (#100.9951) of the PACKAGE PARAMETERS sub-field (#100.995) of the ORDER PARAMETERS File (#100.99) 
               DEFAULT PROTOCOL field (#.03) of the PROTOCOL SET sub-field (#100.9955) of the PACKAGE PARAMETERS sub-field (#100.995) of the ORDER PARAMETERS File (#100.99) 
               ITEM field (#.01) of the ITEM sub-field (#101.01) of the PROTOCOL File (#101) 
               MODIFYING ACTION field (#4) of the ITEM sub-field (#101.01) of the PROTOCOL File (#101) 
               SUBSCRIBERS field (#.01) of the SUBSCRIBERS sub-field (#101.0775) of the PROTOCOL File (#101) 
               PROCEDURE/REQUEST TYPE field (#4) of the REQUEST/CONSULTATION File (#123) 
               URGENCY field (#5) of the REQUEST/CONSULTATION File (#123) 
               PLACE OF CONSULTATION field (#6) of the REQUEST/CONSULTATION File (#123) 
               PROTOCOL MENU OF REQUEST ITEMS field (#123.02) of the REQUEST SERVICES File (#123.5) 
               PROTOCOL ACTION MENU BY USERS field (#123.03) of the REQUEST SERVICES File (#123.5) 
               PROTOCOL ACTION MENU BY OPTION field (#123.04) of the REQUEST SERVICES File (#123.5) 
               PROCEDURE TYPE field (#.01) of the PROCEDURE TYPE sub-field (#123.5101) of the REQUEST SERVICES File (#123.5) 
               GMRCR PROTOCOL field (#.01) of the GMRCR PROTOCOL sub-field (#123.99) of the CONSULTS PARAMETERS FILE File (#123.9) 
               VISTA HL7 PROTOCOL field (#.07) of the VDEF EVENT DESCRIPTION File (#577) 
               SUBSCRIBER field (#.01) of the CP_PROTOCOL_LOCATION File (#704.006) 
               RELATED EVENT PROTOCOL field (#10) of the HL7 MESSAGE TEXT File (#772) 
               SUBSCRIBER PROTOCOL field (#8) of the HL7 MESSAGE ADMINISTRATION File (#773) 
               PROTOCOL field (#13) of the ROR REGISTRY PARAMETERS File (#798.1) 
               HL7 EVENT PROTOCOL field (#1) of the CIRN EVENT ASSOCIATION File (#995) 
               ASSOCIATED PROTOCOL field (#.04) of the USR ACTION File (#8930.8) 
               PROTOCOL field (#.25) of the VISIT File (#9000010) 
               

CROSS
REFERENCED BY: SUBSCRIBERS(AB), ITEM(AD), FILE LINK(AE), SENDING APPLICATION(AHL1), TRANSACTION MESSAGE TYPE(AHL1A), EVENT TYPE(AHL1B), VERSION ID(AHL1C), RECEIVING APPLICATION(AHL2), SENDING APPLICATION(AHL21), TRANSACTION MESSAGE TYPE(AHL21A), 
               VERSION ID(AHL21C), TIMESTAMP(AM), ITEM TEXT(AM1), COLUMN WIDTH(AM41), NAME(B), SYNONYM(B), ITEM TEXT(C), ITEM TEXT(K1), SYNONYM(K2), SET MEMBERSHIP(S)

101,.01       NAME                   0;1 FREE TEXT

              INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) D CHKNAME^XQORD101 I $D(X) K:$L(X)>63!($L(X)<3) X
              LAST EDITED:      JUN 17, 1992 
              HELP-PROMPT:      Enter a name that is preceded by the package namespace. 
              DESCRIPTION:
                                A unique name, which is preceded by the package namespace.  

              NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER

              CROSS-REFERENCE:  101^B 
                                1)= S ^ORD(101,"B",$E(X,1,63),DA)=""
                                2)= K ^ORD(101,"B",$E(X,1,63),DA)

              CROSS-REFERENCE:  ^^TRIGGER^101^5 
                                1)= K DIV S DIV=X,D0=DA,DIV(0)=D0 S Y(1)=$S($D(^ORD(101,D0,0)):^(0),1:"") S X=$P(Y(1),U,5),X=X S DIU=X K Y S X=DIV S X=DUZ X ^DD(101,.01,1,2,1.4)
                                1.4)= S DIH=$S($D(^ORD(101,DIV(0),0)):^(0),1:""),DIV=X S $P(^(0),U,5)=DIV,DIH=101,DIG=5 D ^DICR:$N(^DD(DIH,DIG,1,0))>0
                                2)= Q
                                CREATE VALUE)= S X=DUZ
                                DELETE VALUE)= NO EFFECT
                                FIELD)= CREATOR


101,1         ITEM TEXT              0;2 FREE TEXT

              INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>63!($L(X)<3) X
              LAST EDITED:      MAR 03, 1989 
              HELP-PROMPT:      ANSWER MUST BE 3-63 CHARACTERS IN LENGTH 
              DESCRIPTION:
                                The protocol's text as it appears to the user on the menu or subheader.  

              NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER

              CROSS-REFERENCE:  101^C 
                                1)= S ORKX=X D UP^XQORDD1 S ^ORD(101,"C",$E(X,1,63),DA)="",X=ORKX K ORKX
                                2)= S ORKX=X D UP^XQORDD1 K ^ORD(101,"C",$E(X,1,63),DA) S X=ORKX K ORKX

              CROSS-REFERENCE:  101^AM1^MUMPS 
                                1)= D REDO^XQORD101
                                2)= D REDO^XQORD101

              CROSS-REFERENCE:  101^K1^MUMPS 
                                1)= D K11^XQORDD1
                                2)= D K12^XQORDD1


101,1.1       SYNONYM                2;0 Multiple #101.02 (Add New Entry without Asking)

              HELP-PROMPT:      Enter a synonym for this protocol 
              DESCRIPTION:
                                This is another name for the protocol that may be used on lookup.  


101.02,.01      SYNONYM                0;1 FREE TEXT (Multiply asked)

                INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>65!($L(X)<1) X
                LAST EDITED:      OCT 31, 1991 
                HELP-PROMPT:      Enter a synonym for this protocol (1-65 characters) 
                CROSS-REFERENCE:  101.02^B 
                                  1)= S ^ORD(101,DA(1),2,"B",$E(X,1,30),DA)=""
                                  2)= K ^ORD(101,DA(1),2,"B",$E(X,1,30),DA)

                CROSS-REFERENCE:  101^B^MNEMONIC 
                                  1)= S:'$D(^ORD(101,"B",$E(X,1,30),DA(1),DA)) ^(DA)=1
                                  2)= I $D(^ORD(101,"B",$E(X,1,30),DA(1),DA)),^(DA) K ^(DA)

                CROSS-REFERENCE:  101^K2^MUMPS 
                                  1)= D K21^XQORDD1
                                  2)= D K22^XQORDD1

                CROSS-REFERENCE:  101.02^AM1V1^MUMPS 
                                  1)= D REDOM^XQORD101
                                  2)= D REDOM^XQORD101
                                  Updates timestamps on menus containing this item.  





101,1.11      PRINT NAME             .1;1 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>7!($L(X)<1) X
              LAST EDITED:      AUG 08, 1991 
              HELP-PROMPT:      Answer must be 1-7 characters in length. 
              DESCRIPTION:
                                This is a shortened version of the item text to be used on print-outs where the name must be abbreviated.  


101,2         DISABLE                0;3 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>40!($L(X)<1) X
              LAST EDITED:      DEC 07, 1988 
              HELP-PROMPT:      Enter text to disable this protocol (1-40 characters). 
              DESCRIPTION:
                                This field disables use of the protocol when there is text in it.  The text should be a short message explaining why use of the protocol has been disabled, as it will be displayed if the protocol is selected.  


101,3         LOCK                   0;6 FREE TEXT

              The name of the key required of the user to access this option                                                   
              INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>30!($L(X)<1) X I $D(X) Q:$D(^DIC(19.1,"B",X))  W !,*7,"Key name must match exactly with a key in SECURITY KEY file." K X
              LAST EDITED:      MAR 27, 1990 
              HELP-PROMPT:      Enter the exact name of the key required to access this option. 
              DESCRIPTION:
                                This field is used to deny access to users who have this option as part of their menu. If an option has a lock, then only users who hold the matching key can access it.  

              EXECUTABLE HELP:  S X="??",DIC=19.1,DIC(0)="E" I $D(^DIC(19.1,0)),$P(^(0),U,3) W "CURRENT LOCKS:" D ^DIC W !
              NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER


101,3.5       DESCRIPTION            1;0   WORD-PROCESSING #101.06

              HELP-PROMPT:      Enter a description for this protocol 
              DESCRIPTION:
                                This field contains a brief explanation of the protocol.  


101,3.9       PROHIBITED TIMES       0;9 FREE TEXT

              INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>9!($L(X)<9)!'(X?4N1"-"4N) X
              LAST EDITED:      MAR 27, 1990 
              HELP-PROMPT:      Enter the times in military format that this protocol cannot be used. 
              DESCRIPTION:
                                This specifies a time range during which this option cannot be accessed.  The time should be entered in military format. For example, to prohibit an option from running between 9 AM and 2 PM, enter 0900-1400.  


101,4         TYPE                   0;4 SET (Required)

                                'A' FOR action; 
                                'M' FOR menu; 
                                'O' FOR protocol; 
                                'Q' FOR protocol menu; 
                                'L' FOR limited protocol; 
                                'X' FOR extended action; 
                                'D' FOR dialog; 
                                'T' FOR term; 
                                'E' FOR event driver; 
                                'S' FOR subscriber; 
              LAST EDITED:      JUL 22, 1994 
              HELP-PROMPT:      Specify a type for this protocol. 
              DESCRIPTION:      This field defines the type of protocol to be executed.  Types Q, O, and L are strictly related to the 'Add orders' function.  
                                  Q = Protocol menu - used for displaying and selecting orderable items during the add sequence. When this type of protocol is encountered OE/RR will ask the 'Select PATIENT:,' 'LOCATION:,' 'Provider:' prompts and execute
                                the transaction logic for the new orders screen.  This is also true for type O and L.  O = Protocol - same as Q but the protocol is the item selected.  Protocols are directly executed when encountered.  L = Limited
                                protocol - same as O but any existing sub-items are not executed.  M = Menu - used for displaying and selecting items.  X = Extended action - protocols of this type execute the entry action plus all sub-items.  
                                  A = Action - same as X but any existing sub-items are not executed.  


101,5         CREATOR                0;5 POINTER TO NEW PERSON FILE (#200) (Required)

              LAST EDITED:      AUG 20, 1990 
              HELP-PROMPT:      Enter the creator of this protocol. 
              DESCRIPTION:
                                This field identifies who created the protocol.  

              WRITE AUTHORITY:  ^
              NOTES:            TRIGGERED by the NAME field of the PROTOCOL File 


101,6         FILE LINK              5;1          VARIABLE POINTER

              FILE  ORDER  PREFIX    LAYGO  MESSAGE
                 19   1    OPT          n   OPTION 
                 60   2    LAB          n   LAB 
                 62   3    SAM          n   SAMPLE 
                 61   4    SPEC         n   SPECIMEN 
                 71   5    RAD          n   RADIOLOGY PROCEDURE 
             62.05    6    URG          n   URGENCY 
             62.07    7    EXE          n   EXECUTE CODE 
             123.5    8    S            n   SERVICE 
             123.1    9    A            n   ACTION TYPES 
                                         
              LAST EDITED:      APR 19, 1991 
              HELP-PROMPT:      Enter the file, if any, that this protocol is linked to. 
              DESCRIPTION:
                                This field is a variable pointer which may point to the entry in a file to which a protocol is linked.  

              CROSS-REFERENCE:  101^AE 
                                1)= S ^ORD(101,"AE",$E(X,1,30),DA)=""
                                2)= K ^ORD(101,"AE",$E(X,1,30),DA)


101,8         COST                   5;2 NUMBER

              INPUT TRANSFORM:  S:X["$" X=$P(X,"$",2) K:X'?.N.1".".2N!(X>9999999)!(X<0) X
              LAST EDITED:      APR 26, 1989 
              HELP-PROMPT:      Type a Dollar Amount between 0 and 9999999, 2 Decimal Digits 
              DESCRIPTION:
                                This is the cost of filling the order associated with this protocol.  


101,10        ITEM                   10;0 POINTER Multiple #101.01 (Add New Entry without Asking)

              HELP-PROMPT:      Enter items for this protocol. 
              DESCRIPTION:
                                This is the item multiple for a protocol 


101.01,.01      ITEM                   0;1 POINTER TO PROTOCOL FILE (#101) (Multiply asked)

                INPUT TRANSFORM:  S ORDDF=101 D TREE^XQORD101
                LAST EDITED:      SEP 11, 1991 
                HELP-PROMPT:      Enter a protocol.  A protocol that is an ancestor may not also be a sub-item. 
                DESCRIPTION:
                                  This points to a protocol which is subordinate to this protocol.  NOTE:  The parent protocol or one of its ancestors may not be entered as an item.  

                NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER

                CROSS-REFERENCE:  101.01^B 
                                  1)= S ^ORD(101,DA(1),10,"B",$E(X,1,30),DA)=""
                                  2)= K ^ORD(101,DA(1),10,"B",$E(X,1,30),DA)

                CROSS-REFERENCE:  101.01^AMM^MUMPS 
                                  1)= D REDOX^XQORD101
                                  2)= D REDOX^XQORD101

                CROSS-REFERENCE:  101^AD 
                                  1)= S ^ORD(101,"AD",$E(X,1,30),DA(1),DA)=""
                                  2)= K ^ORD(101,"AD",$E(X,1,30),DA(1),DA)

                CROSS-REFERENCE:  ^^TRIGGER^101.01^11 
                                  1)= X ^DD(101.01,.01,1,4,1.3) I X S X=DIV S Y(1)=$S($D(^ORD(101,D0,10,D1,1)):^(1),1:"") S X=$P(Y(1),U,1),X=X S DIU=X K Y X ^DD(101.01,.01,1,4,1.1) X ^DD(101.01,.01,1,4,1.4)
                                  1.1)= S X=DIV S I(1,0)=$S($D(D1):D1,1:""),I(0,0)=$S($D(D0):D0,1:""),D0=DIV S:'$D(^ORD(101,+D0,0)) D0=-1 S Y(101)=$S($D(^ORD(101,D0,101.04)):^(101.04),1:"") S X=$P(Y(101),U,2) S D0=I(0,0) S D1=I(1,0)
                                  1.3)= K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X X ^DD(101.01,.01,1,4,69.3) S Y(101)=$S($D(^ORD(101,D0,0)):^(0),1:"") S X=$P(Y(101),U,4),X=X S X=X="T",Y=X,X=Y(5),X=X&Y S D0=I(0,0) S D1=I(1,0)
                                  1.4)= S DIH=$S($D(^ORD(101,DIV(0),10,DIV(1),1)):^(1),1:""),DIV=X S $P(^(1),U,1)=DIV,DIH=101.01,DIG=11 D ^DICR:$N(^DD(DIH,DIG,1,0))>0
                                  2)= Q
                                  69.2)= S I(1,0)=$S($D(D1):D1,1:""),I(0,0)=$S($D(D0):D0,1:""),Y(4)=$S($D(^ORD(101,D0,0)):^(0),1:""),Y(1)=$S($D(^ORD(101,D0,10,D1,1)):^(1),1:"") S X=$P(Y(1),U,1)
                                  69.3)= X ^DD(101.01,.01,1,4,69.2) S X=X="",Y(2)=X,Y(3)=X S X=$P(Y(4),U,4),X=X S X=X="D",Y=X,X=Y(2),X=X&Y,Y(5)=X,Y(6)=X,D0=Y(0) S:'$D(^ORD(101,+D0,0)) D0=-1
                                  CREATE CONDITION)= (PROMPT="")&(INTERNAL(TYPE)="D")&(INTERNAL(ITEM:TYPE)="T")
                                  CREATE VALUE)= ITEM:DEFAULT PROMPT
                                  DELETE VALUE)= NO EFFECT
                                  FIELD)= PROMPT
                                  On adding an item initially, stuff the prompt field with the default prompt if the item is a term.  


                CROSS-REFERENCE:  ^^TRIGGER^101.01^12 
                                  1)= X ^DD(101.01,.01,1,5,1.3) I X S X=DIV S Y(1)=$S($D(^ORD(101,D0,10,D1,1)):^(1),1:"") S X=$P(Y(1),U,2),X=X S DIU=X K Y X ^DD(101.01,.01,1,5,1.1) X ^DD(101.01,.01,1,5,1.4)
                                  1.1)= S X=DIV S I(1,0)=$S($D(D1):D1,1:""),I(0,0)=$S($D(D0):D0,1:""),D0=DIV S:'$D(^ORD(101,+D0,0)) D0=-1 S Y(101)=$S($D(^ORD(101,D0,101.04)):^(101.04),1:"") S X=$P(Y(101),U,3) S D0=I(0,0) S D1=I(1,0)
                                  1.3)= K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X X ^DD(101.01,.01,1,5,69.3) S Y(101)=$S($D(^ORD(101,D0,0)):^(0),1:"") S X=$P(Y(101),U,4),X=X S X=X="T",Y=X,X=Y(5),X=X&Y S D0=I(0,0) S D1=I(1,0)
                                  1.4)= S DIH=$S($D(^ORD(101,DIV(0),10,DIV(1),1)):^(1),1:""),DIV=X S $P(^(1),U,2)=DIV,DIH=101.01,DIG=12 D ^DICR:$N(^DD(DIH,DIG,1,0))>0
                                  2)= Q
                                  69.2)= S I(1,0)=$S($D(D1):D1,1:""),I(0,0)=$S($D(D0):D0,1:""),Y(4)=$S($D(^ORD(101,D0,0)):^(0),1:""),Y(1)=$S($D(^ORD(101,D0,10,D1,1)):^(1),1:"") S X=$P(Y(1),U,2)
                                  69.3)= X ^DD(101.01,.01,1,5,69.2) S X=X="",Y(2)=X,Y(3)=X S X=$P(Y(4),U,4),X=X S X=X="D",Y=X,X=Y(2),X=X&Y,Y(5)=X,Y(6)=X,D0=Y(0) S:'$D(^ORD(101,+D0,0)) D0=-1
                                  CREATE CONDITION)= (DEFAULT="")&(INTERNAL(TYPE)="D")&(INTERNAL(ITEM:TYPE)="T")
                                  CREATE VALUE)= ITEM:DEFAULT ANSWER
                                  DELETE VALUE)= NO EFFECT
                                  FIELD)= DEFAULT
                                  On adding an item initially, stuff the default field with the default answer if the item is a term.  


                CROSS-REFERENCE:  ^^TRIGGER^101.01^13 
                                  1)= X ^DD(101.01,.01,1,6,1.3) I X S X=DIV S Y(1)=$S($D(^ORD(101,D0,10,D1,1)):^(1),1:"") S X=$P(Y(1),U,3),X=X S DIU=X K Y X ^DD(101.01,.01,1,6,1.1) X ^DD(101.01,.01,1,6,1.4)
                                  1.1)= S X=DIV S I(1,0)=$S($D(D1):D1,1:""),I(0,0)=$S($D(D0):D0,1:""),D0=DIV S:'$D(^ORD(101,+D0,0)) D0=-1 S Y(101)=$S($D(^ORD(101,D0,101.04)):^(101.04),1:"") S X=$P(Y(101),U,4) S D0=I(0,0) S D1=I(1,0)
                                  1.3)= K DIV S DIV=X,D0=DA(1),DIV(0)=D0,D1=DA,DIV(1)=D1 S Y(0)=X X ^DD(101.01,.01,1,6,69.3) S Y(101)=$S($D(^ORD(101,D0,0)):^(0),1:"") S X=$P(Y(101),U,4),X=X S X=X="T",Y=X,X=Y(5),X=X&Y S D0=I(0,0) S D1=I(1,0)
                                  1.4)= S DIH=$S($D(^ORD(101,DIV(0),10,DIV(1),1)):^(1),1:""),DIV=X S $P(^(1),U,3)=DIV,DIH=101.01,DIG=13 D ^DICR:$N(^DD(DIH,DIG,1,0))>0
                                  2)= Q
                                  69.2)= S I(1,0)=$S($D(D1):D1,1:""),I(0,0)=$S($D(D0):D0,1:""),Y(4)=$S($D(^ORD(101,D0,0)):^(0),1:""),Y(1)=$S($D(^ORD(101,D0,10,D1,1)):^(1),1:"") S X=$P(Y(1),U,3)
                                  69.3)= X ^DD(101.01,.01,1,6,69.2) S X=X="",Y(2)=X,Y(3)=X S X=$P(Y(4),U,4),X=X S X=X="D",Y=X,X=Y(2),X=X&Y,Y(5)=X,Y(6)=X,D0=Y(0) S:'$D(^ORD(101,+D0,0)) D0=-1
                                  CREATE CONDITION)= (HELP="")&(INTERNAL(TYPE)="D")&(INTERNAL(ITEM:TYPE)="T")
                                  CREATE VALUE)= ITEM:DEFAULT HELP
                                  DELETE VALUE)= NO EFFECT
                                  FIELD)= HELP
                                  On adding an item initially, stuff the help field with the default help if the item is a term.  



101.01,2        MNEMONIC               0;2 FREE TEXT

                INPUT TRANSFORM:  I $D(X) K:$L(X)>4!($L(X)<1) X
                LAST EDITED:      JAN 04, 1989 
                HELP-PROMPT:      Enter a Mnemonic to be used when this protocol is displayed for selection (1-4 characters). 
                DESCRIPTION:
                                  This is a short abbreviation for the item.  

                NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER

                CROSS-REFERENCE:  101.01^AMM2^MUMPS 
                                  1)= D REDOX^XQORD101
                                  2)= D REDOX^XQORD101


101.01,3        SEQUENCE               0;3 NUMBER

                INPUT TRANSFORM:  K:+X'=X!(X>999)!(X<1)!(X?.E1"."3N.N) X
                LAST EDITED:      SEP 11, 1991 
                HELP-PROMPT:      Enter a number for sequencing this item with other items when displayed. 
                DESCRIPTION:      This is the order in which items in the list should be processed.  In the case of menus, the items are displayed in the order derived from this field.  In the case of protocols and extended actions, the items are 
                                  executed in the order derived from this field.  

                CROSS-REFERENCE:  101.01^AMM3^MUMPS 
                                  1)= D REDOX^XQORD101
                                  2)= D REDOX^XQORD101


101.01,4        MODIFYING ACTION       0;4 POINTER TO PROTOCOL FILE (#101)

                INPUT TRANSFORM:  S ORDDF=101 D TREE^XQORD101
                LAST EDITED:      MAY 02, 1989 
                DESCRIPTION:      This points to a protocol which is executed before the item for this same entry is executed.  This allows the possibility of creating protocols which set up special variables, etc., according to the context of the 
                                  protocol.  It also allows screens at the item level if the variables ORQUIT or ORABORT are used to prevent execution of the item.  

                NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER


101.01,5        FORMAT CODE            0;5 SET

                                  'O' FOR output only; 
                                  'H' FOR header; 
                LAST EDITED:      SEP 11, 1991 
                HELP-PROMPT:      Enter OUTPUT ONLY if this item should be displayed only, HEADER if this item should start printing over the mnemonic. 
                DESCRIPTION:
                                  This allows items used on menus for formatting purposes to be made unselectable (sub-headers, blank lines, etc.).  

                CROSS-REFERENCE:  101.01^AMM5^MUMPS 
                                  1)= D REDOX^XQORD101
                                  2)= D REDOX^XQORD101
                                  Update protocol timestamp when FORMAT CODE changed.  



101.01,6        DISPLAY NAME           0;6 FREE TEXT

                INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>40!($L(X)<1) X
                LAST EDITED:      SEP 11, 1991 
                HELP-PROMPT:      Answer must be 1-40 characters in length. 
                DESCRIPTION:      This allows the item text that normally appears on the menu to be displayed.  For example, this field may be used to set up menus so that items are displayed in mixed case, even though the item text may all be in upper
                                  case.  

                CROSS-REFERENCE:  101.01^AMM6^MUMPS 
                                  1)= D REDOX^XQORD101
                                  2)= D REDOX^XQORD101
                                  Update protocol timestamp whenever DISPLAY NAME is changed.  



101.01,11       PROMPT                 1;1 FREE TEXT

                INPUT TRANSFORM:  K:$L(X)>30!($L(X)<1) X
                LAST EDITED:      AUG 19, 1991 
                HELP-PROMPT:      Answer must be 1-30 characters in length. 
                DESCRIPTION:
                                  This is the actual prompt displayed for this item in the dialog.  

                NOTES:            TRIGGERED by the ITEM field of the ITEM sub-field of the PROTOCOL File 


101.01,12       DEFAULT                1;2 FREE TEXT

                INPUT TRANSFORM:  K:$L(X)>80!($L(X)<1) X
                LAST EDITED:      AUG 19, 1991 
                HELP-PROMPT:      Answer must be 1-80 characters in length. 
                DESCRIPTION:
                                  This is the default response for this item in the dialog.  

                NOTES:            TRIGGERED by the ITEM field of the ITEM sub-field of the PROTOCOL File 


101.01,13       HELP                   1;3 FREE TEXT

                INPUT TRANSFORM:  K:$L(X)>80!($L(X)<1) X
                LAST EDITED:      AUG 19, 1991 
                HELP-PROMPT:      Answer must be 1-80 characters in length. 
                DESCRIPTION:
                                  This is the help text displayed for this item in the dialog.  

                NOTES:            TRIGGERED by the ITEM field of the ITEM sub-field of the PROTOCOL File 


101.01,14       MODE                   1;4 FREE TEXT

                INPUT TRANSFORM:  K:$L(X)>5!($L(X)<1) X
                LAST EDITED:      SEP 06, 1991 
                HELP-PROMPT:      Answer must be 1-5 characters in length. 
                DESCRIPTION:      This tells how this item should be treated when processing the dialog.  
                                    S - suppresses inclusion of the prompt when creating the text generated 
                                        by the dialog.  
                                    E - allows the item to only be presented when editing an existing 
                                        response.  
                                    R - identifies the field as required.  




101,12        PACKAGE                0;12 POINTER TO PACKAGE FILE (#9.4)

              LAST EDITED:      NOV 28, 1988 
              HELP-PROMPT:      Enter the package for this protocol. 
              DESCRIPTION:
                                Pointer to Package File (#9.4).  


101,15        EXIT ACTION            15;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      NOV 21, 1988 
              HELP-PROMPT:      ENTER STANDARD MUMPS CODE 
              DESCRIPTION:
                                This field contains MUMPS code which will be executed on leaving this option.  It is only applicable to Menu types.  

              DELETE AUTHORITY: @
              WRITE AUTHORITY:  @

101,20        ENTRY ACTION           20;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      NOV 21, 1988 
              HELP-PROMPT:      ENTER STANDARD MUMPS CODE 
              DESCRIPTION:
                                This field contains MUMPS code which will be executed on entering this option.  It is applicable to Menu and Action types.  

              DELETE AUTHORITY: @
              WRITE AUTHORITY:  @

101,21        REQUIRED VARIABLES     21;0 Multiple #101.021 (Add New Entry without Asking)

              HELP-PROMPT:      Enter the required variables for this protocol. 
              DESCRIPTION:      This lists the variables that must be defined for the proper execution of this protocol.  This aids in documenting the protocol.  Also, in the case of ';' jumping, the variables defined as required may be newed before 
                                jumping, thus preserving the context when returning from the jump.  


101.021,.01     REQUIRED VARIABLES     0;1 FREE TEXT (Multiply asked)

                INPUT TRANSFORM:  K:$L(X)>30!($L(X)<1)!'(X?1A.E) X
                LAST EDITED:      DEC 09, 1988 
                HELP-PROMPT:      Enter the required variable. 
                CROSS-REFERENCE:  101.021^B 
                                  1)= S ^ORD(101,DA(1),21,"B",$E(X,1,30),DA)=""
                                  2)= K ^ORD(101,DA(1),21,"B",$E(X,1,30),DA)




101,24        SCREEN                 24;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      APR 26, 1989 
              HELP-PROMPT:      This is standard MUMPS code to screen an item from processing. 
              DESCRIPTION:      This field contains MUMPS code that screens out menu items or the execution of particular items in a protocol.  Before each item is displayed or executed, the screen is executed and the item is only processed if $T is
                                true.  

              DELETE AUTHORITY: @
              WRITE AUTHORITY:  @

101,26        HEADER                 26;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      DEC 05, 1988 
              HELP-PROMPT:      Enter standard MUMPS code that will used to replace the header on the menu. 
              DESCRIPTION:
                                In the case of menus (type M or Q), this contains MUMPS code that is executed to display a header for the menu.  

              WRITE AUTHORITY:  @

101,27        MENU HELP              27;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      DEC 07, 1988 
              HELP-PROMPT:      Enter standard MUMPS code that will be used to supplement the standard help prompt for this entry. 
              DESCRIPTION:
                                This contains MUMPS code that displays additional help to that already given with the menu.  

              WRITE AUTHORITY:  @

101,28        MENU PROMPT            28;E1,245 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>245!($L(X)<1) X
              LAST EDITED:      DEC 07, 1988 
              HELP-PROMPT:      Enter a replacement prompt for selecting items on this menu. 
              DESCRIPTION:
                                This contains text to replace the standard "Select Item: " prompt normally given with a menu.  


101,29        MENU DEFAULT           29;E1,245 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>245!($L(X)<1) X
              LAST EDITED:      FEB 10, 1992 
              HELP-PROMPT:      Enter a default for the menu prompt. 
              DESCRIPTION:
                                This field contains a default response (i.e., default selection from the menu), if desired.  


101,30        DIC {DIC}              30;E1,64 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>64!($L(X)<1) X
              LAST EDITED:      MAR 12, 1991 
              HELP-PROMPT:      Answer must be 1-64 characters in length. 
              DESCRIPTION:
                                This field is used as the global reference passed to ^DIC for a file look-up.  The entry should be in the regular format for a call to ^DIC i.e. ^GL(41, 


101,41        COLUMN WIDTH           4;1 NUMBER

              INPUT TRANSFORM:  K:+X'=X!(X>132)!(X<25)!(X?.E1"."1N.N) X
              LAST EDITED:      DEC 07, 1988 
              HELP-PROMPT:      Type a Number between 25 and 132, 0 Decimal Digits 
              DESCRIPTION:
                                This is the width, in characters, for each column on a menu.  For example, to have 3 columns on an 80 character device, enter a column width of 26.  

              CROSS-REFERENCE:  101^AM41^MUMPS 
                                1)= D REDO^XQORD101
                                2)= D REDO^XQORD101


101,42        MNEMONIC WIDTH         4;2 NUMBER

              INPUT TRANSFORM:  K:+X'=X!(X>9)!(X<1)!(X?.E1"."1N.N) X
              LAST EDITED:      FEB 11, 1989 
              HELP-PROMPT:      Type a Number between 1 and 9, 0 Decimal Digits 
              DESCRIPTION:
                                This field allows the width allowed for mnemonics to be varied.  The default width is 5.  


101,43        PATH SWITCH            4;3 SET

                                'Y' FOR YES; 
                                'N' FOR NO; 
              LAST EDITED:      DEC 07, 1988 
              HELP-PROMPT:      Enter Y for YES, N for NO, ?? for detailed description. 
              DESCRIPTION:      This allows the user, when traversing back UP the tree of protocols, to select a new path back down the tree.  In other words, the menu is redisplayed when returning to that menu's level in the tree, and processing back
                                down the tree is possible from that point.  If nothing is selected from the menu, the path continues back up the tree.  


101,44        IDENTIFIER             4;4 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>63!($L(X)<1) X
              LAST EDITED:      NOV 30, 1989 
              HELP-PROMPT:      Answer must be 1-63 characters in length. 
              DESCRIPTION:
                                Entries into this file can be given identifiers to show context, function and/or relationships.  For example, Digoxin may exist in the file as three different entries with identifiers of SERUM, PLASMA and Drug.  


101,99        TIMESTAMP              99;1 FREE TEXT

              INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>15!($L(X)<1) X
              LAST EDITED:      NOV 22, 1988 
              HELP-PROMPT:      ANSWER MUST BE 1-15 CHARACTERS IN LENGTH 
              DESCRIPTION:
                                This contains the $H time that fields which are necessary to menu display were last changed.  

              CROSS-REFERENCE:  101^AM^MUMPS 
                                1)= D SET^XQORD101
                                2)= D KILL^XQORD101


101,100       *ORDER PRINT ACTION    100;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      DEC 09, 1988 
              HELP-PROMPT:      ENTER STANDARD MUMPS CODE 
              DESCRIPTION:
                                ***NOTICE- THIS FIELD WILL BE REMOVED IN A FUTURE VERSION*** Package action when a detailed listing of an order is requested.  Included in this file for backward compatability with earlier versions of OE/RR.  

              WRITE AUTHORITY:  @

101,100.1     *ORDER CANCEL ACTION   100.1;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      DEC 09, 1988 
              HELP-PROMPT:      ENTER STANDARD MUMPS CODE 
              DESCRIPTION:
                                ***NOTICE- THIS FIELD WILL BE REMOVED IN A FUTURE VERSION*** Package action when an order is cancelled or discontinued.  Included in this file for backward compatability with earlier versions of OE/RR.  

              WRITE AUTHORITY:  @

101,100.2     *ORDER PURGE ACTION    100.2;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      DEC 09, 1988 
              HELP-PROMPT:      ENTER STANDARD MUMPS CODE 
              DESCRIPTION:
                                ***NOTICE- THIS FIELD WILL BE REMOVED IN A FUTURE VERSION*** Package action when an order is to be purged from file 100.  Included in this file for backward compatability with earlier versions of OE/RR.  

              WRITE AUTHORITY:  @

101,100.3     ACCESS                 3;0 POINTER Multiple #101.03

              HELP-PROMPT:      Enter a security key to limit access to this protocol. 
              DESCRIPTION:
                                This multiple contains the list of security keys which allow access to the protocol.  If there are no keys, all users have access.  


101.03,.01      ACCESS                 0;1 POINTER TO SECURITY KEY FILE (#19.1) (Multiply asked)

                LAST EDITED:      MAR 27, 1990 
                HELP-PROMPT:      Enter a security key to limit access to this protocol. 
                CROSS-REFERENCE:  101.03^B 
                                  1)= S ^ORD(101,DA(1),3,"B",$E(X,1,30),DA)=""
                                  2)= K ^ORD(101,DA(1),3,"B",$E(X,1,30),DA)

                CROSS-REFERENCE:  101.03^K^MUMPS 
                                  1)= D K31^XQORDD1
                                  2)= D K32^XQORDD1




101,101.01    REQUIRES SIGNATURE     101.01;1 SET

                                '0' FOR PHYSICIAN SIGNATURE; 
                                '1' FOR NO SIGNATURE REQUIRED; 
              LAST EDITED:      AUG 09, 1991 
              HELP-PROMPT:      Enter a '1' if this protocol does not require a physician signature. 
              DESCRIPTION:      This field is used to specify an orderable/protocol that does not require a physician signature in OE/RR.  Some of the things entered in OE/RR are considered instructions and don't require physician signature.  An example
                                of this might be an entry for an Early/Late tray.  


101,101.041   DOMAIN (DATA TYPE)     101.04;1 SET

                                'D' FOR date/time; 
                                'F' FOR free text; 
                                'L' FOR list or range; 
                                'N' FOR numeric; 
                                'S' FOR set of codes; 
                                'Y' FOR yes/no; 
                                'P' FOR pointer; 
                                'M' FOR menu; 
                                'W' FOR word processing; 
              LAST EDITED:      AUG 19, 1991 
              HELP-PROMPT:      Enter the appropriate type for this prompt. 
              DESCRIPTION:
                                This is the data type of a term (i.e. protocol of type term) used in a dialog.  


101,101.042   DEFAULT PROMPT         101.04;2 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>30!($L(X)<1) X
              LAST EDITED:      AUG 19, 1991 
              HELP-PROMPT:      Answer must be 1-30 characters in length. 
              DESCRIPTION:
                                For this term, this is the prompt that is automatically used when the term is used as an item in a dialog.  The prompt may be modified at the item level.  


101,101.043   DEFAULT ANSWER         101.04;3 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>80!($L(X)<1) X
              LAST EDITED:      AUG 19, 1991 
              HELP-PROMPT:      Answer must be 1-80 characters in length. 
              DESCRIPTION:
                                For a term protocol, this is the default answer that is automatically used when the term is used as an item in a dialog.  The default may be modified at the item level.  


101,101.0431  DEFAULT WORD PROCESSING ANSWER 101.0431;0   WORD-PROCESSING #101.0431   (NOWRAP)

              DESCRIPTION:
                                This is text used as a template for an item in a dialog that is a word processing type.  


101,101.044   DEFAULT HELP           101.04;4 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>80!($L(X)<1) X
              LAST EDITED:      AUG 19, 1991 
              HELP-PROMPT:      Answer must be 1-80 characters in length. 
              DESCRIPTION:
                                For a term protocol, this is the help text that is automatically used when the term is used as an item in a dialog.  The help text may be replaced at the item level.  


101,101.045   DOMAIN PARAMETER       101.04;5 FREE TEXT

              INPUT TRANSFORM:  K:$L(X)>56!($L(X)<1) X
              LAST EDITED:      NOV 26, 1991 
              HELP-PROMPT:      Answer must be 1-56 characters in length. 
              DESCRIPTION:
                                This is a parameter that may be used to further specify the data type (i.e. input transform) for a term protocol.  The parameter is what would be placed in the second up-arrow piece of DIR(0) when calling the reader.  


101,101.05    METHOD                 101.05;0 Multiple #101.05

              DESCRIPTION:
                                This number identifies individual methods (actions) that may be invoked for this protocol.  

              TECHNICAL DESCR:
                                Method numbers correspond to ORACTION numbers.  

              IDENTIFIED BY:    METHOD ACTION(#.02)

101.05,.01      METHOD                 0;1 NUMBER (Multiply asked)

                INPUT TRANSFORM:  K:+X'=X!(X>20)!(X<1)!(X?.E1"."1N.N) X S:$D(X) DINUM=X
                LAST EDITED:      JUN 14, 1991 
                HELP-PROMPT:      Type a Number between 1 and 20, 0 Decimal Digits 
                DESCRIPTION:
                                  This is reserved for future use.  The numeric values of this field currently correspond to OE/RR actions.  

                NOTES:            XXXX--CAN'T BE ALTERED EXCEPT BY PROGRAMMER


101.05,.02      METHOD ACTION          1;E1,245 MUMPS

                INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
                LAST EDITED:      APR 01, 1991 
                HELP-PROMPT:      This is Standard MUMPS code. 
                DESCRIPTION:
                                  This is the code necessary to implement the method.  




101,101.07    SET MEMBERSHIP         101.07;0 Multiple #101.07

              DESCRIPTION:
                                This is a namespaced name of a set.  If this is entered, a cross reference of the format "S.set membership" is created.  This allows rapid lookups on subsets of the Protocol file.  


101.07,.01      SET MEMBERSHIP         0;1 FREE TEXT

                INPUT TRANSFORM:  K:X[""""!($A(X)=45) X I $D(X) K:$L(X)>8!($L(X)<2) X
                LAST EDITED:      APR 01, 1991 
                HELP-PROMPT:      Answer must be 2-8 characters in length. 
                CROSS-REFERENCE:  101.07^B 
                                  1)= S ^ORD(101,DA(1),101.07,"B",$E(X,1,30),DA)=""
                                  2)= K ^ORD(101,DA(1),101.07,"B",$E(X,1,30),DA)

                CROSS-REFERENCE:  101^S^MUMPS 
                                  1)= I $L($P(^ORD(101,DA(1),0),"^",2)) S ^ORD(101,"S."_X,$P(^ORD(101,DA(1),0),"^",2),DA(1))=""
                                  2)= I $L($P(^ORD(101,DA(1),0),"^",2)) K ^ORD(101,"S."_X,$P(^ORD(101,DA(1),0),"^",2),DA(1))




101,770.1     SENDING APPLICATION    770;1 POINTER TO HL7 APPLICATION PARAMETER FILE (#771)

              LAST EDITED:      JUL 14, 1999 
              HELP-PROMPT:      Enter the application that initiates the transaction. 
              DESCRIPTION:
                                Enter the name of the application that initiates a transaction. It is required only when defining an EVENT POINT protocol.  

              CROSS-REFERENCE:  101^AHL1^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^",3)&($P(HL770,"^",4))&($P(HL770,"^",10)) ^ORD(101,"AHL1",X,$P(HL770,"^",3),$P(HL770,"^",4),$P(HL770,"^",10),DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^",3)&($P(HL770,"^",4))&($P(HL770,"^",10)) ^ORD(101,"AHL1",X,$P(HL770,"^",3),$P(HL770,"^",4),$P(HL770,"^",10),DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message.
                                This cross reference is used to look up the protocol related to an incoming message at the time the incoming message is received.  This cross reference is composed of values from the Server Application, Message Type, Event 
                                Type and Version ID fields. This cross reference works in conjunction with the AHL1A, AHL1B and AHL1C cross references.  


              CROSS-REFERENCE:  101^AHL21^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^",3)&($P(HL770,"^",10)) ^ORD(101,"AHL21",X,$P(HL770,"^",3),$P(HL770,"^",10),DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^",3)&($P(HL770,"^",10)) ^ORD(101,"AHL21",X,$P(HL770,"^",3),$P(HL770,"^",10),DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message without an event type.
                                This cross reference is used to look up the protocol related to an incoming message without an event type at the time the incoming message is received.  This cross reference is composed of values from the Server 
                                Application, Message Type, and Version ID fields.  This cross reference works in conjunction with the AHL21A and AHL21C cross references.  



101,770.11    RESPONSE MESSAGE TYPE  770;11 POINTER TO HL7 MESSAGE TYPE FILE (#771.2)

              LAST EDITED:      JUN 17, 1999 
              HELP-PROMPT:      Enter the message type of the expected response. 
              DESCRIPTION:      Enter the message type of the expected RESPONSE. It should only be defined on a SUBSCRIBER PROTOCOL.  
                                 
                                NOTE: In a contract between the initiating system and the responding system, the Event Driver protocol defines the characteristics of the INITIATING SYSTEM. The Initiating System initiates either queries or unsolicited 
                                update messages. A Subscriber Protocol defines the characteristics of the RESPONDING SYSTEM. The responding system completes a transaction by returning either an acknowledgement and/or a response to the specific query
                                message.  


101,770.14    BATCH/FILE MESSAGE COMMIT ACK 770;14 SET

                                '1' FOR YES; 
                                '0' FOR NO; 
              LAST EDITED:      JUL 28, 1998 
              DESCRIPTION:      In a bi-directional interface, this field will be used to determine whether or not a Batch or File message should send or receive a Commit Acknowledgement.  A Batch or File message will always send/receive an Application
                                Ack. This feature is non-standard according to HL7.  It is needed to insure the receipt of a message.  


101,770.2     RECEIVING APPLICATION  770;2 POINTER TO HL7 APPLICATION PARAMETER FILE (#771)

              LAST EDITED:      JUL 13, 1999 
              HELP-PROMPT:      The application that will receive the message. 
              DESCRIPTION:
                                This is the application that receives a message. It is otherwise known as the "responding" application when a transaction takes place. This information is required for SUBSCRIBER protocols only.  

              CROSS-REFERENCE:  101^AHL2 
                                1)= S ^ORD(101,"AHL2",$E(X,1,30),DA)=""
                                2)= K ^ORD(101,"AHL2",$E(X,1,30),DA)
                                3)= This cross reference is needed to provide a list of Client (Subscriber) protocols.
                                This cross reference is used to provide a list of Client (Subscriber) protocols.  



101,770.3     TRANSACTION MESSAGE TYPE 770;3 POINTER TO HL7 MESSAGE TYPE FILE (#771.2)

              LAST EDITED:      JUL 14, 1999 
              HELP-PROMPT:      Enter the HL7 MESSAGE TYPE that is sent by the initiating system. 
              DESCRIPTION:      Enter the name of the message type for the the message that is sent from the initiating system. When initiating a new transaction, this field is referenced when generating the header for the outbound message.  
                                 
                                NOTE: In a contract between the initiating system and the responding system, the Event Driver protocol defines the characteristics of the INITIATING SYSTEM. The Initiating System initiates either queries or unsolicited 
                                update messages. A Subscriber Protocol defines the characteristics of the RESPONDING SYSTEM. The responding system completes a transaction by returning either an acknowledgement and/or a response to the specific query
                                message.  

              CROSS-REFERENCE:  101^AHL1A^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^")&($P(HL770,"^",4))&($P(HL770,"^",10)) ^ORD(101,"AHL1",$P(HL770,"^"),X,$P(HL770,"^",4),$P(HL770,"^",10),DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^")&($P(HL770,"^",4))&($P(HL770,"^",10)) ^ORD(101,"AHL1",$P(HL770,"^"),X,$P(HL770,"^",4),$P(HL770,"^",10),DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message.
                                This cross reference is used to look up the protocol related to an incoming message at the time the incoming message is received.  This cross reference is composed of values from the Server Application, Message Type, Event 
                                Type and Version ID fields. This cross reference works in conjunction with the AHL1, AHL1B and AHL1C cross references.  


              CROSS-REFERENCE:  101^AHL21A^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^")&($P(HL770,"^",10)) ^ORD(101,"AHL21",$P(HL770,"^"),X,$P(HL770,"^",10),DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^")&($P(HL770,"^",10)) ^ORD(101,"AHL21",$P(HL770,"^"),X,$P(HL770,"^",10),DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message without an event type.
                                This cross reference is used to look up the protocol related to an incoming message without an event type at the time the incoming message is received.  This cross reference is composed of values from the Server 
                                Application, Message Type and Version ID fields. This cross reference works in conjunction with the AHL21 and AHL21C cross references.  



101,770.4     EVENT TYPE             770;4 POINTER TO HL7 EVENT TYPE CODE FILE (#779.001)

              LAST EDITED:      JUL 14, 1999 
              HELP-PROMPT:      The event type associated with the message to be generated. 
              DESCRIPTION:      This is the HL7 Event Type code for the message represented by this protocol. In HL7, the message type and event type of an application response message may be different from the original message.  
                                 
                                If this is an event point protocol, enter the event type corresponding to the initial message generated by the SENDING APPLICATION.  
                                 
                                 
                                If this is a subscriber protocol, then enter the event type corresponding to the RECEIVING APPLICATION response. Note that an event type is not required when responding with a general acknowledgement (ACK) and the 
                                receiving application does not always need to generate a response.  
                                 
                                NOTE: 
                                 
                                1. In "original acknowledgement mode" the receiving application always generates the response.  2. In "enhanced acknowledgement mode" the HL7 package may be configured to produce a "commit ack" before the application
                                receives the message. If the receiving application does not need to generate a response in addition to the ack, then the event type is the same as the original message (and the message type would be ACK) 3. In "enhanced
                                acknowledgement mode with two-phase commit" the HL7 package generates a commit ack, and passes the message to the application.  The second phase of the transaction occurs when the application is ready to initiate a
                                response. This is interpreted as the start of a new transaction and may require a commit ack itself.  

              CROSS-REFERENCE:  101^AHL1B^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^")&($P(HL770,"^",3))&($P(HL770,"^",10)) ^ORD(101,"AHL1",$P(HL770,"^"),$P(HL770,"^",3),X,$P(HL770,"^",10),DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^")&($P(HL770,"^",3))&($P(HL770,"^",10)) ^ORD(101,"AHL1",$P(HL770,"^"),$P(HL770,"^",3),X,$P(HL770,"^",10),DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message.
                                This cross reference is used to look up the protocol related to an incoming message at the time the incoming message is received.  This cross reference is composed of values from the Server Application, Message Type, Event 
                                Type, and Version ID fields.  This cross reference works in conjunction with the AHL1, AHL1A, and AHL1C cross references.  



101,770.5     MESSAGE STRUCTURE      770;5 POINTER TO HL7 MESSAGE STRUCTURE CODE FILE (#779.005)

              LAST EDITED:      JAN 19, 2000 
              HELP-PROMPT:      Enter the HL7 message structure code. 
              DESCRIPTION:
                                The message structure is associated with the message type and event type defined by HL7 v2.3.1 and beyond.  


101,770.6     PROCESSING ID          770;6 SET

                                'D' FOR debug; 
              LAST EDITED:      MAY 09, 2000 
              HELP-PROMPT:      Set this only for DEBUG MODE. Use HL7 site params for Test or Production 
              DESCRIPTION:      This field describes how a message should be processed once it is handed off to the receiving application. 
                                 
                                PROCESSING ID is a required field in the HL7 message header. However, the Event Driver protocol entry is only used whenset to DEBUG. Data for the header is normally derived from the HL COMMUNICATION SERVER FILE. If testing
                                a transaction in Debug mode, make sure it is changed on both the sending and receiving system.  
                                 
                                 
                                The receiving application developer should consider checking this portion of the header before filing data on a production system. Training and Debug messages may not be suitable for filing.  


101,770.7     LOGICAL LINK           770;7 POINTER TO HL LOGICAL LINK FILE (#870)

              LAST EDITED:      OCT 17, 1994 
              HELP-PROMPT:      This field should be left blank for internal DHCP to DHCP communications.  Otherwise, this field associates the event protocol with the communication information needed to transmit a message. 
              DESCRIPTION:      This field is used with a SUBSCRIBER PROTOCOL to describe the network path to the subscriber. It is most often used with a fixed point-to-point interface between Vista and another system, e.g., a local COTS application or
                                another Vista facility. See the documentation on use of the ROUTING LOGIC field and "dynamic addressing" for more complex routing scenarios.  


101,770.8     ACCEPT ACK CODE        770;8 POINTER TO HL7 ACCEPT/APPLICATION ACK CONDITION FILE (#779.003)

              LAST EDITED:      SEP 28, 1994 
              HELP-PROMPT:      This field specifies the method for handling accept acknowledgements to a message. 
              DESCRIPTION:      This field defines whether or not a COMMIT ACK will be generated by the HL7 package. This only applies to transactions using version 2.2 and higher of the HL7 Standard. See Chapter 2 of the HL7 Standard for details of
                                Enhanced Mode Acknowledgements.  


101,770.9     APPLICATION ACK TYPE   770;9 POINTER TO HL7 ACCEPT/APPLICATION ACK CONDITION FILE (#779.003)

              LAST EDITED:      SEP 28, 1994 
              HELP-PROMPT:      This field specifies the method for handling application acknowledgements to a message. 
              DESCRIPTION:      For transactions using versions 2.2 and higher of the HL7 standard, this field defines whether or not the receiving application is expected to return an acknowledgement. Enhanced Mode Application Acks are always initiated
                                as a new transaction. The following is an example of a 2-phased acknowledgement over a tcp connection.  
                                 
                                 
                                (A)INITIATING SYSTEM         (B)RESPONDING SYSTEM 
                                 
                                PHASE I Open connection to B send ADT/A04----------------->receive ADT/A04 
                                                              validate header 
                                                              commit to safe storage receive CA<-------------------send CA to A Close connection 
                                 
                                PHASE II 
                                                              handoff to receiving Application 
                                                              parse and validate message content 
                                                              generate APPLICATION ACCEPT ACK 
                                                              Open connection to A receive AA<-------------------send AA validate header commit to safe storage send CA to B------------------>receive CA 
                                                               close connection 


101,770.95    VERSION ID             770;10 POINTER TO HL7 VERSION FILE (#771.5)

              LAST EDITED:      AUG 24, 1999 
              HELP-PROMPT:      Enter the version of the HL7 Standard used to implement this transaction 
              DESCRIPTION:      Enter the version of the HL7 standard used to implement this transaction.  
                                 
                                Note that a screen has been added to insure that the version selected corresponds to the appropriate version of the Message Type defined.  

              SCREEN:           S DIC("S")="N HLX S HLX=+$P(^ORD(101,DA,770),U,3) I $S('HLX:0,'$O(^HL(771.2,HLX,""V"",0)):0,1:$D(^HL(771.2,HLX,""V"",""B"",+$O(^HL(771.5,""B"",X,0)))))"
              EXPLANATION:      Only version IDs assigned to the Message Type selected are applicable.
              CROSS-REFERENCE:  101^AHL1C^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^")&($P(HL770,"^",3))&($P(HL770,"^",4)) ^ORD(101,"AHL1",$P(HL770,"^"),$P(HL770,"^",3),$P(HL770,"^",4),X,DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^")&($P(HL770,"^",3))&($P(HL770,"^",4)) ^ORD(101,"AHL1",$P(HL770,"^"),$P(HL770,"^",3),$P(HL770,"^",4),X,DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message.
                                This cross reference is used to look up the protocol related to an incoming message at the time the incoming message is received.  This cross reference is composed of values from the Server Application, Message Type, Event
                                Type, and Version ID fields.  This cross reference works in conjunction with the AHL1, AHL1A, and AHL1B cross references.  


              CROSS-REFERENCE:  101^AHL21C^MUMPS 
                                1)= N HL770 S HL770=$G(^ORD(101,DA,770)) S:$P(HL770,"^")&($P(HL770,"^",3)) ^ORD(101,"AHL21",$P(HL770,"^"),$P(HL770,"^",3),X,DA)=""
                                2)= N HL770 S HL770=$G(^ORD(101,DA,770)) K:$P(HL770,"^")&($P(HL770,"^",3)) ^ORD(101,"AHL21",$P(HL770,"^"),$P(HL770,"^",3),X,DA)
                                3)= This cross reference is required to look up the protocol related to an incoming message without an event type.
                                This cross reference is used to look up the protocol related to an incoming message without an event type at the time the incoming message is received.  This cross reference is composed of values from the Server 
                                Application, Message Type, and Version ID fields.  This cross reference works in conjunction with the AHL21 and AHL21A cross references.  



101,771       PROCESSING ROUTINE     771;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      JUL 12, 1999 
              HELP-PROMPT:        This is Standard MUMPS code. 
              DESCRIPTION:      This field is executed on the receiving system. It defines the routine used to process the original inbound message in a transaction and to GENERATE and APPLICATION response/ACK back to the sending system using the entry
                                point, GENACK^HLMA1.  

              WRITE AUTHORITY:  @

101,772       RESPONSE PROCESSING ROUTINE 772;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      JUL 12, 1999 
              HELP-PROMPT:      Code that executes the routine to generate an acknowledgement message (for a subscriber application) or to process an acknowledgement message (for a server application).  This is Standard MUMPS code. 
              DESCRIPTION:      This field is executed on the sending system when an Acknowledgement or Query response is received. The message ID of the original message is always contained within the response. This is used to identify the location of
                                the original message and the corresponding event point protocol. Note that this pertains to Original and Enhanced Mode Application Acks only. The HL7 package generates and processes Enhanced mode Commit Accepts internally.  

              WRITE AUTHORITY:  @

101,773.1     SENDING FACILITY REQUIRED? 773;1 SET

                                '1' FOR YES; 
                                '0' FOR NO; 
              LAST EDITED:      SEP 28, 1994 
              HELP-PROMPT:      Enter 'Y' for 'YES' if the sending facility field is required in the message header segment. 

101,773.2     RECEIVING FACILITY REQUIRED? 773;2 SET

                                '1' FOR YES; 
                                '0' FOR NO; 
              LAST EDITED:      SEP 28, 1994 
              HELP-PROMPT:      Enter 'Y' for 'YES' if the receiving facility field is required in the message header segment. 

101,773.3     SECURITY REQUIRED?     773;3 SET

                                '1' FOR YES; 
                                '0' FOR NO; 
              LAST EDITED:      SEP 28, 1994 
              HELP-PROMPT:      Enter 'Y' for 'YES' if the security field is required in the message header segment. 

101,773.4     DATE/TIME OF MESSAGE REQUIRED? 773;4 SET

                                '1' FOR YES; 
                                '0' FOR NO; 
              LAST EDITED:      JUL 12, 1999 
              HELP-PROMPT:      Enter 'Y' for 'YES' if the date/time of message field is required in the message header segment. 

101,773.5     ACK MODE SET IN SUBSCRIBER 773;5 SET

                                '1' FOR YES; 
                                '0' FOR NO; 
              LAST EDITED:      APR 17, 2007 
              HELP-PROMPT:      Enter 'Y' for 'YES' for setting the MSH-15 and MSH-16 from subscriber protocol instead of Event driver protocol. 
              DESCRIPTION:
                                A 'YES' of this field will indicate that MSH-15 and MSH-16 will be taken from Subscriber protocol instead of the value(s) defined in Event driver protocol.  


101,774       ROUTING LOGIC          774;E1,245 MUMPS

              INPUT TRANSFORM:  K:$L(X)>245 X D:$D(X) ^DIM
              LAST EDITED:      SEP 24, 1996 
              HELP-PROMPT:      This is Standard MUMPS code. 
              DESCRIPTION:      M code in this field is executed only when a message is in an OUTBOUND state. Normally, Vista HL7 'broadcasts' a message to all subscribers whenever a message is generated. However, in some cases, a client may need to
                                receive the message only if it matches a particular condition. This field allows you to set up screening logic to interpret the message and dynamically address the message to those interested in the data when it meets
                                these conditions. The output of your routing logic routine should be the creation of a list of additional message recipients set into the HLL("LINKS") array.  
                                 
                                For details on dynamic addressing, see the documentation for HL*1.6*14.  

              WRITE AUTHORITY:  @

101,775       SUBSCRIBERS            775;0 POINTER Multiple #101.0775 (Add New Entry without Asking)

              SCREEN:           S DIC("S")="I $P(^(0),U,4)=""S"""
              EXPLANATION:      Type field must be a Subscriber

101.0775,.01    SUBSCRIBERS            0;1 POINTER TO PROTOCOL FILE (#101) (Multiply asked)

                INPUT TRANSFORM:  S DIC("S")="I $P(^(0),U,4)=""S""" D ^DIC K DIC S DIC=DIE,X=+Y K:Y<0 X
                LAST EDITED:      JUL 22, 1999 
                DESCRIPTION:
                                  This contains Protocols of Type, Subscribers, who are subscribing to this Event Drivers.  

                SCREEN:           S DIC("S")="I $P(^(0),U,4)=""S"""
                EXPLANATION:      Type must be Subscriber
                CROSS-REFERENCE:  101.0775^B 
                                  1)= S ^ORD(101,DA(1),775,"B",$E(X,1,30),DA)=""
                                  2)= K ^ORD(101,DA(1),775,"B",$E(X,1,30),DA)

                CROSS-REFERENCE:  101^AB 
                                  1)= S ^ORD(101,"AB",$E(X,1,30),DA(1),DA)=""
                                  2)= K ^ORD(101,"AB",$E(X,1,30),DA(1),DA)





      FILES POINTED TO                      FIELDS

COLLECTION SAMPLE (#62)           FILE LINK (#6)

EXECUTE CODE (#62.07)             FILE LINK (#6)

HL LOGICAL LINK (#870)            LOGICAL LINK (#770.7)

HL7 ACCEPT/APPLICATION ACK CON 
                   (#779.003)     ACCEPT ACK CODE (#770.8)
                                  APPLICATION ACK TYPE (#770.9)

HL7 APPLICATION PARAMETER 
                   (#771)         SENDING APPLICATION (#770.1)
                                  RECEIVING APPLICATION (#770.2)

HL7 EVENT TYPE CODE (#779.001)    EVENT TYPE (#770.4)

HL7 MESSAGE STRUCTURE CODE 
                   (#779.005)     MESSAGE STRUCTURE (#770.5)

HL7 MESSAGE TYPE (#771.2)         RESPONSE MESSAGE TYPE (#770.11)
                                  TRANSACTION MESSAGE TYPE (#770.3)

HL7 VERSION (#771.5)              VERSION ID (#770.95)

LABORATORY TEST (#60)             FILE LINK (#6)

NEW PERSON (#200)                 CREATOR (#5)

OPTION (#19)                      FILE LINK (#6)

PACKAGE (#9.4)                    PACKAGE (#12)

PROTOCOL (#101)                   ITEM:ITEM (#.01)
                                  MODIFYING ACTION (#4)
                                  SUBSCRIBERS:SUBSCRIBERS (#.01)

RAD/NUC MED PROCEDURES (#71)      FILE LINK (#6)

REQUEST ACTION TYPES (#123.1)     FILE LINK (#6)

REQUEST SERVICES (#123.5)         FILE LINK (#6)

SECURITY KEY (#19.1)              ACCESS:ACCESS (#.01)

TOPOGRAPHY FIELD (#61)            FILE LINK (#6)

URGENCY (#62.05)                  FILE LINK (#6)



INPUT TEMPLATE(S):
HL MESSAGING PROTOCOL EDIT    MAY 23, 1995@14:21  USER #0    
OR ACTIVATE ITEMS             OCT 11, 1991@08:49  USER #0    
OR ADV MENU                   MAY 22, 1989@14:53  USER #0    
OR EDIT MENU                  FEB 11, 1989        USER #0    
OR EDIT PROTOCOL              MAR 10, 1989        USER #0    
OR PROFILE                    FEB 11, 1989        USER #0    
ORCL ADV MENU EDIT            FEB 05, 1992@15:44  USER #0    
ORCL PROTOCOL MENU            JAN 28, 1992@11:01  USER #0    
VALM PROTOCOL EDIT            DEC 17, 1992@14:25  USER #0    
XUPRTL INPUT                  OCT 21, 2004@11:03  USER #0    

PRINT TEMPLATE(S):
GMRC PROTOCOL LIST            OCT 07, 1991@15:09  USER #0                                                                                                                                                                                   GMRC PROTOCOL LIST
GMRC PROTOCOL RPT             OCT 09, 1991@18:21  USER #0                                                                                                                                                                              [GMRC PROTOCOL RPT HDR]
GMRC PROTOCOL RPT HDR         OCT 10, 1991@14:28  USER #0                                                                                                                                                                                                    @
HL PROTOCOL MESSAGING FIELDS  JAN 16, 2003@07:37  USER #0                                                                                                                                                                    Protocol Fields Used in Messaging

SORT TEMPLATE(S):
GMRC PROTOCOLS                OCT 07, 1991@15:08  USER #0    
SORT BY: ]NAME// (NAME from GMRC to GMRCZ)

HL PROTOCOL MESSAGING FIELDS  JAN 23, 2003@05:39  USER #0                                                                                                                                            'HL PROTOCOL MESSAGING FIELDS' Print Template always used
SORT BY: @SENDING APPLICATION//    (User is asked range)
  WITHIN SENDING APPLICATION, SORT BY: @TRANSACTION MESSAGE TYPE//    (User is asked range)
    WITHIN TRANSACTION MESSAGE TYPE, SORT BY: @EVENT TYPE// (All EVENT TYPE (includes nulls))
      WITHIN EVENT TYPE, SORT BY: @VERSION ID// (All VERSION ID (includes nulls))
        WITHIN VERSION ID, SORT BY: INTERNAL(TYPE)="E";L1// (INTERNAL(TYPE)=""E"")
          WITHIN INTERNAL(TYPE)="E", SORT BY: COUNT(SUBSCRIBER)>0;L1// (COUNT(SUBSCRIBER)>0)


FORM(S)/BLOCK(S):
HL7 INTERFACE                 JUL 09, 1999@08:39  USER #0
  HL7 INTERFACE HDR1            DD #101
  HL7 INTERFACE BLK1            DD #101
  HL7 EVENT DRV                 DD #101
  HL7 EVENT DRV ITEM            DD #101.0775
  HL7 SUBSCRIBER                DD #101
  HL SUBSCRIBER2                DD #101
  HL7 APP BLK2                  DD #771
  HL7 APP BLK3                  DD #771
